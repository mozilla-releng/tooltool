---
swagger: "2.0"
info:
  version: "1.0.0"
  title: "ToolTool"
basePath: /api
consumes:
 - application/json
produces:
 - application/json
paths:


  /init:

    get:
      operationId: "tooltool_api.lib.auth.initial_data"
      description: Initial data for frontend
      responses:
        200:
          description: Initial data
          schema:
            type: object
            required:
              - user
              - perms
            properties:
              user:
                type: object
                required:
                  - type
                  - permissions
                properties:
                  type:
                    type: string
                  permissions:
                    type: array
                    items:
                      type: object
                      required:
                        - doc
                        - name
                      properties:
                        doc:
                          type: string
                        name:
                          type: string
                  authenticated_email:
                    type: string
              perms:
                type: object
                additionalProperties:
                  type: string

  /upload:

    get:
      operationId: "tooltool_api.api.search_batches"
      description: Search upload batches.
      parameters:
        - name: q
          in: query
          description: |
            Query parameter can match a substring of an authors email or a
            batch message.
          required: true
          type: string
      responses:
        200:
          description: An array of upload batches.
          schema:
            type: object
            required:
              - result
            properties:
              result:
                type: array
                items:
                  $ref: '#/definitions/UploadBatch'

    post:
      operationId: "tooltool_api.api.upload_batch"
      description: |
        Create a new upload batch.  The response object will contain
        a ``put_url`` for each file which needs to be uploaded -- which may not
        be all!  The caller is then responsible for uploading to those URLs.
        The resulting signed URLs are valid for one hour, so uploads should
        begin within that timeframe.  Consider using Amazon MD5-verification
        capabilities to ensure that the uploaded files are transferred
        correctly, although the tooltool server will verify the integrity
        anyway.  The upload must have the header ``Content-Type:
        application/octet-stream``.

        The returned URLs are only valid for 60 seconds, so all upload requests
        must begin within that timeframe.  Clients should therefore perform all
        uploads in parallel, rather than sequentially.  This limitation is in
        place to prevent malicious modification of files after they have been
        verified.
      parameters:
        - name: body
          in: body
          description: Upload batch.
          required: true
          schema:
            $ref: '#/definitions/UploadBatch'
        - name: region
          in: query
          description: |
            The region query argument ``region=us-west-1`` indicates a
            preference for URLs in that region, although if the region is not
            available then URLs in other regions may be returned.
          required: false
          type: string
      responses:
        200:
          description: Upload batch.
          schema:
            type: object
            required:
              - result
            properties:
              result:
                $ref: '#/definitions/UploadBatch'


  /upload/{id}:

    get:
      operationId: "tooltool_api.api.get_batch"
      description: Get a specific upload batch by id.
      parameters:
        - name: id
          in: path
          description: Upload batch id.
          required: true
          type: integer
      responses:
        200:
          description: Upload batch.
          schema:
            $ref: '#/definitions/UploadBatch'
        404:
          description: Batch can not be found.
          schema:
            $ref: '#/definitions/Problem'

  /upload/complete/sha512/{digest}:
    get:
      operationId: "tooltool_api.api.upload_complete"
      description: |
        Signal that a file has been uploaded and the server should begin
        validating it.  This is merely an optimization: the server also polls
        occasionally for uploads and validates them when they appear.

        Uploads cannot be safely validated until the upload URL has expired,
        which occurs a short time after the URL is generated (currently 60
        seconds but subject to change).

      parameters:
        - name: digest
          in: path
          required: true
          type: string
      responses:
        202:
          description: |
            If the upload URL has expired, then the response is an HTTP 202
            indicating that the signal has been accepted.  If the URL has not
            expired, then the response is an HTTP 409, and the
            ``X-Retry-After`` header gives a time, in seconds, that the client
            should wait before trying again.
          schema:
            type: string
        400:
          description: Wrong digest.
          schema:
            $ref: '#/definitions/Problem'
        409:
          description: Upload expired, send retry eader
          headers:
            X-Retry-After:
              description: Retry after timestamp in epoc.
              type: string


  /file:

    get:
      operationId: "tooltool_api.api.search_files"
      description: Search for files matching the query.
      parameters:
        - name: q
          in: query
          description: |
            The query matches against prefixes of hashes (at least 8
            characters) or against filenames.
          required: true
          type: string
      responses:
        200:
          description: File
          schema:
            type: object
            required:
              - result
            properties:
              result:
                type: array
                items:
                  $ref: '#/definitions/File'



  /file/sha512/{digest}:

    get:
      operationId: "tooltool_api.api.get_file"
      description: |
        Get a single file, by its digest.  Filenames are associated with upload
        batches, not directly with files, so use ``GET /uploads`` to find files
        by filename.

        The returned File instance contains an ``instances`` attribute showing
        the regions in which the file exists.
      parameters:
        - name: digest
          in: path
          required: true
          type: string
      responses:
        200:
          description: File
          schema:
            $ref: '#/definitions/File'
        400:
          description: Wrong digest.
          schema:
            $ref: '#/definitions/Problem'
        404:
          description: File can not be found.
          schema:
            $ref: '#/definitions/Problem'
        500:
          description: Internal server error.
          schema:
            $ref: '#/definitions/Problem'

    patch:
      operationId: "tooltool_api.api.patch_file"
      description: |
        Make administrative changes to an existing file.  The body is a list of
        changes to apply, each represented by a JSON object.

        The object ``{"op": "delete_instances"}`` will cause all instances of
        the file to be deleted.  The file record itself will not be deleted,
        as it is still a part of one or more upload batches, but until and
        unless someone uploads a new copy, the content will not be available
        for download.

        If the change has op ``"set_visibility"``, then the files visibility
        will be set to the value given by the changes ``visibility`` attribute.
        For example, ``{"op": "set_visibility", "visibility": "internal"}``
        will mark a file as "internal" after someone has accidentally uploaded
        it with public visibility.

        The returned File instance contains an ``instances`` attribute showing
        any changes.
      parameters:
        - name: digest
          in: path
          required: true
          type: string
        - name: body
          in: body
          description: Upload batch.
          required: true
          schema:
            type: array
            items:
              type: object
              required:
                - op
              properties:
                op:
                  type: string
                  enum:
                    - set_visibility
                    - delete_instances
                visibility:
                  type: string
                  enum:
                     - public
                     - internal
      responses:
        200:
          description: File
          schema:
            $ref: '#/definitions/File'
        400:
          description: Wrong op.
          schema:
            $ref: '#/definitions/Problem'
        401:
          description: No permission.
          schema:
            $ref: '#/definitions/Problem'
        404:
          description: File can not be found.
          schema:
            $ref: '#/definitions/Problem'
        500:
          description: Internal server error.
          schema:
            $ref: '#/definitions/Problem'


  /sha512/{digest}:
    get:
      operationId: "tooltool_api.api.download_file"
      description: Fetch a link to the file with the given sha512 digest.
      parameters:
        - name: digest
          in: path
          required: true
          type: string
      responses:
        302:
          description: Redirect to a signed download URL.
          headers:
            Location:
              description: Download URL.
              type: string
        400:
          description: sha512 digest is not valid.
          schema:
            $ref: '#/definitions/Problem'
        401:
          description: No permission to download file.
          schema:
            $ref: '#/definitions/Problem'
        404:
          description: File can not be found.
          schema:
            $ref: '#/definitions/Problem'
        500:
          description: Internal server error.
          schema:
            $ref: '#/definitions/Problem'


definitions:

  UploadBatch:
    type: object
    description: |
      An upload batch describes a collection of related files that are uploaded
      together -- similar to a version-control commit.  The message and files
      list must be non-empty.
    required:
      - message
      - files
    properties:
      id:
        type: integer
        description: Identifier for this batch
      uploaded:
        type: string  # TODO: dateTime
        description: |
         The date and time when this upload occurred.  This will be added by
         the server and need not be specified when making a new upload.
      author:
        type: string
        description: |
          The author (uploader) of the batch.  Do not include this when
          submitting a batch for upload; it will be filled in based on the
          request authentication.
      message:
        type: string
        description: |
          The message for the batch.  Format this like a version-control
          message.
      files:
        type: object
        description: |
          The collection of files in this batch, keyed by filename.  Note that
          filenames containing path separators (``\`` and ``/``) will be
          rejected the tooltool client.
        additionalProperties:
          $ref: '#/definitions/File'

  File:
    type: object
    description: |
      A representation of a single file, identified by its contents rather than
      its filename.  Depending on context, this may contain URLs to download or
      upload the file.
    required:
      - visibility
    properties:
      size:
        type: integer
        description: The size of the file, in bytes
      digest:
        type: string
        description: The sha512 digest of the file contents.
      algorithm:
        type: string
        description: |
          The digest algorithm (reserved for future expansion; must always be
          sha512).
      visibility:
        type: string
        description: |
          The visibility level of this file.  When making an upload, the uploader
          is (legally) responsible for selecting the correct visibility level.
        default: public
        enum:
           - public
           - internal
      has_instances:
        type: boolean
        description: |
          Boolean to determine whether the file is available to download.
      instances:
        type: array
        description: |
          The regions containing an instance of this file.  This field is
          generally omitted except where specified.
        items:
          type: string
      get_url:
        type: string
        description: The URL from which this file can be downlaoded via HTTP GET.
      put_url:
        type: string
        description: |
          The URL to which this file can be uploaded via HTTP PUT. The URL
          requires the request content-type to be ``application/octet-stream``.

  Problem:
    type: object
    properties:
      type:
        type: string
        format: uri
        description: |
          An absolute URI that identifies the problem type.  When dereferenced,
          it SHOULD provide human-readable documentation for the problem type
          (e.g., using HTML).
        default: 'about:blank'
        example: 'https://zalando.github.io/problem/constraint-violation'
      title:
        type: string
        description: |
          A short, summary of the problem type. Written in english and readable
          for engineers (usually not suited for non technical stakeholders and
          not localized)
        example: Service Unavailable
      status:
        type: integer
        format: int32
        description: |
          The HTTP status code generated by the origin server for this occurrence
          of the problem.
        minimum: 100
        maximum: 600
        exclusiveMaximum: true
        example: 503
      detail:
        type: string
        description: |
          A human readable explanation specific to this occurrence of the
          problem.
        example: Connection to database timed out
      instance:
        type: string
        format: uri
        description: |
          An absolute URI that identifies the specific occurrence of the problem.
          It may or may not yield further information if dereferenced.
